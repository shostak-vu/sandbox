<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>BatchImport</web>
<name>BatchImportSheet</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1325372400000</creationDate>
<date>1341157958000</date>
<contentUpdateDate>1341157958000</contentUpdateDate>
<version>1.1</version>
<title>$msg.get('batchimport.import.title', [$doc.space])</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{velocity output="false"}}
#macro(printAttachmentExtension $attachment)
  #set($filename = $attachment.filename)
  #set($lastDot = $filename.lastIndexOf('.'))
  #if ($lastDot &gt; 0)$filename.substring($lastDot)#end
#end

#macro(displayDefaultButtons $previousStep $nextStep $currentStep)
  &lt;div class="buttonwrapper"&gt;
    #if ("$!previousStep" != "")
      &lt;input type="submit" value='$msg.get("batchimport.import.${currentStep}.previous")' name="step_${previousStep}" class="button previous" /&gt;  
    #end  
    #if ("$!nextStep" != "")
      &lt;input type="submit" value='$msg.get("batchimport.import.${currentStep}.next")' name="step_${nextStep}" class="button next" /&gt;  
    #end
  &lt;/div&gt;  
#end

#macro(printBatchImportNonDefaultOptions $config)
  #if($config.attachmentReference)
    &lt;input type="hidden" name="batchimportattachmentref" value="$services.model.serialize($config.attachmentReference)" /&gt;
  #end
  #if($config.fieldsMapping.size() &gt; 0)
    #foreach($fieldMapping in $config.fieldsMapping.entrySet())
      &lt;input type="hidden" name="batchimportmapping_${fieldMapping.key}" value="${fieldMapping.value}" /&gt;
    #end
  #end
#end

#macro(displayUploadFile)
  == $msg.get('batchimport.import.choosefile.title') ==

  ## upload form for files
  {{html clean="false"}}
    &lt;form method="post" enctype="multipart/form-data" action="$doc.getURL('upload')" /&gt;
      &lt;input type="hidden" value="$!{services.csrf.getToken()}" name="form_token" /&gt;
      &lt;input type="hidden" value="$doc.getURL('view', "sheet=$escapetool.url('BatchImport.BatchImportSheet')&amp;ref=upload")" name="xredirect" /&gt;
      &lt;input type="file" class="uploadFileInput" size="40" value="" name="filepath"&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" class="button" value="$msg.get('batchimport.import.choosefile.uploadfile')"&gt;&lt;/span&gt;
    &lt;/form&gt;
  {{/html}}

  ##file listing + selector
  {{html clean="false"}}
    &lt;form action="" method="post"&gt;
      ## display the attachmens list in descending order by date and select the latest by default if we're coming from an upload
      #set ($attachmentList = $doc.getAttachmentList())
      #if ($attachmentList &amp;&amp; $attachmentList.size() &gt; 0)
        #set ($sortedAttachments = $sorttool.sort($attachmentList, 'date:desc'))
      #end

      #set($justUploaded = false)
      #if("$!request.ref" == "upload")
        #set($justUploaded = true)
      #end
      &lt;ul&gt;
        #foreach($attachment in $sortedAttachments)
          #set($attachmentExtension = "#printAttachmentExtension($attachment)")
          #if ($attachment.mimeType == "text/plain" || $attachmentExtension == ".csv" || $attachmentExtension == "" || $attachmentExtension == ".xls")
            #set($attachmentRef = $services.model.createAttachmentReference($doc.documentReference, $attachment.filename))
            ## FIXME: read here attachment reference from config to display
            &lt;li&gt;&lt;input type="radio" name="batchimportattachmentref" value="$services.model.serialize($attachmentRef)" #if($velocityCount == 1 &amp;&amp; $justUploaded)checked="checked"#end /&gt;$attachment.filename&lt;/attachment&gt;&lt;/li&gt;
          #end
        #end
      &lt;/ul&gt;
      #displayDefaultButtons("", "mapping", "choosefile")
    &lt;/form&gt;
  {{/html}}
#end

#macro(displayColumnMapping)
  == $msg.get('batchimport.import.mapping.title') ==

  #set($applicationClass = $xwiki.getClass($importconfig.mappingClassName))
  
  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;  
    #printBatchImportNonDefaultOptions($importconfig)
  {{/html}}

  #set($columnsList = $services.batchimport.getColumnHeaders($importconfig))
  {{html clean="false" wiki="true"}}
    |=  $msg.get('batchimport.import.mapping.fields', [$doc.space]) |= $msg.get('batchimport.import.mapping.columns')
    | $msg.get('batchimport.import.mapping.doc.name') | &lt;select name="batchimportmapping_doc.name"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get('doc.name')" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
    | $msg.get('batchimport.import.mapping.doc.file') | &lt;select name="batchimportmapping_doc.file"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get('doc.file')" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
    #foreach($prop in $applicationClass.properties)    
      | $prop.prettyName | &lt;select name="batchimportmapping_${prop.name}"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get($prop.name)" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
    #end
  {{/html}}
  
  {{html clean="false" wiki="false"}}
    #displayDefaultButtons("choosefile", "importsimulation", "mapping")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImportSimulation)
  == $msg.get('batchimport.import.importsimulation.title') ==
  
  
  #set($result = $services.batchimport.doImport($importconfig, true, true, false, true, false))
  
  {{info}}$result{{/info}}
  
  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;  
    #printBatchImportNonDefaultOptions($importconfig)
    #displayDefaultButtons("mapping", "import", "importsimulation")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImport)
  == $msg.get('batchimport.import.import.title') ==
  
  
  #set($result = $services.batchimport.doImport($importconfig, true, true, false, false, false))
  
  {{info}}$result{{/info}}
#end
{{/velocity}}

{{velocity}}
## read the import config, the import steps will need it
#set($importconfig = $services.batchimport.readConfigurationFromRequest())
## and put the default settings
#set($discard = $importconfig.setHeaderRow(true))
#set($discard = $importconfig.setDefaultSpace($doc.space))
#set($spaceHome = $xwiki.getDocument($doc.space, 'WebHome'))
#set($livetableObjInWebHome = $spaceHome.getObject('AppWithinMinutes.LiveTableClass'))
#set($classDocument = $livetableObjInWebHome.getProperty('class').value)
#set($discard = $importconfig.setMappingClassName($classDocument))
## try to guess the type of import by the name of the attachment
#if($services.model.serialize($importconfig.attachmentReference).endsWith(".xls"))
  #set($discard = $importconfig.setType('xls'))
#else
  #set($discard = $importconfig.setType('csv'))
#end
#set($listSeparatorString = ".")
#set($discard = $importconfig.setListSeparator($listSeparatorString.charAt(0)))

#if("$!request.step_mapping" != "")
  #displayColumnMapping()
#elseif("$!request.step_importsimulation" != "")
  #doImportSimulation()
#elseif("$!request.step_import" != "")
  #doImport()
#else
  #displayUploadFile()
#end
{{/velocity}}
</content></xwikidoc>