<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>BatchImport</web>
<name>BatchImportSheet</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1325372400000</creationDate>
<date>1341346110000</date>
<contentUpdateDate>1341346110000</contentUpdateDate>
<version>1.1</version>
<title>$msg.get('batchimport.import.title', [$doc.space])</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{velocity output="false"}}
#macro(displayLastException $translationKeyComponent)
  #set($exception = $services.batchimport.exceptionFromContext)
  #if ($exception)
    {{error}}**$msg.get("batchimport.import.${translationKeyComponent}.error.exception")**
    
      [$exception.class.name] $exception.message
      #foreach($elt in $exception.stackTrace)
        at $elt
      #end
    {{/error}}
  #else
    {{error}}
      $msg.get("batchimport.import.${translationKeyComponent}.error.noexception")
    {{/error}}
  #end
#end

#macro(printAttachmentExtension $attachment)
  #set($filename = $attachment.filename)
  #set($lastDot = $filename.lastIndexOf('.'))
  #if ($lastDot &gt; 0)$filename.substring($lastDot)#end
#end

#macro(displayDefaultButtons $previousStep $nextStep $currentStep)
  ## display the current step in hidden so that we know when to save the data in the class
  &lt;input type="hidden" name="referringstep" value="$currentStep" /&gt;
  &lt;div class="buttonwrapper"&gt;
    #if ("$!previousStep" != "")
      &lt;input type="submit" value='$msg.get("batchimport.import.${currentStep}.previous")' name="step_${previousStep}" class="button previous" /&gt;  
    #end  
    #if ("$!nextStep" != "")
      &lt;input type="submit" value='$msg.get("batchimport.import.${currentStep}.next")' name="step_${nextStep}" class="button next" /&gt;  
    #end
  &lt;/div&gt;  
#end

#macro(printBatchImportNonDefaultOptions $config)
  #if($config.attachmentReference)
    &lt;input type="hidden" name="batchimportattachmentref" value="$services.model.serialize($config.attachmentReference)" /&gt;
  #end
  #if($config.fieldsMapping.size() &gt; 0)
    #foreach($fieldMapping in $config.fieldsMapping.entrySet())
      &lt;input type="hidden" name="batchimportmapping_${fieldMapping.key}" value="${fieldMapping.value}" /&gt;
    #end
  #end
#end

#macro(saveDataToPresetsObject)
  ## get the previous step
  #set($referringStep = "$!request.referringstep")
  ## get the object, create a new one if needed
  #set($presetsObject = $doc.getObject('BatchImport.BatchImportClass'))
  #if(!$presetsObject)
    #set($presetsObject = $doc.newObject('BatchImport.BatchImportClass'))
  #end
  #set($madeChanges = false)
  #if($referringStep == "choosefile")
    ## save the file in the class, only if different
    #if ($services.model.serialize($importconfig.attachmentReference) != $presetsObject.getProperty('metadatafilename').value)
      #set($discard = $presetsObject.set('metadatafilename', $services.model.serialize($importconfig.attachmentReference)))
      #set($madeChanges = true)
    #end
  #elseif($referringStep == "mapping")
    ## serialize and save the mapping in the classm only if different
    #set($mappingString = "")
    #foreach($fieldMapping in $importconfig.fieldsMapping.entrySet())
      #if ($mappingString != "")
        #set($mappingString = "${mappingString}${util.newline}")
      #end
      ## the other way around since this is the way we save in the class
      #set($mappingString = "${mappingString}${fieldMapping.value}=${fieldMapping.key}")
    #end
    #if ($mappingString != $presetsObject.getProperty('mapping').value)
      #set($discard = $presetsObject.set('mapping', $mappingString))
      #set($madeChanges = true)
    #end
  #end
  ## FIXME: add the other properties to this save
  ## if any changes were made, save the presets
  #if($madeChanges)
    $doc.save("Updated presets")
  #end
#end

#macro(displayUploadFile)
  == $msg.get('batchimport.import.choosefile.title') ==

  ## upload form for files
  {{html clean="false"}}
    &lt;form method="post" enctype="multipart/form-data" action="$doc.getURL('upload')" /&gt;
      &lt;input type="hidden" value="$!{services.csrf.getToken()}" name="form_token" /&gt;
      &lt;input type="hidden" value="$doc.getURL('view', "sheet=$escapetool.url('BatchImport.BatchImportSheet')&amp;ref=upload")" name="xredirect" /&gt;
      &lt;input type="file" class="uploadFileInput" size="40" value="" name="filepath"&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" class="button" value="$msg.get('batchimport.import.choosefile.uploadfile')"&gt;&lt;/span&gt;
    &lt;/form&gt;
  {{/html}}

  ##file listing + selector
  {{html clean="false"}}
    &lt;form action="" method="post"&gt;
      ## display the attachmens list in descending order by date and select the latest by default if we're coming from an upload
      #set ($attachmentList = $doc.getAttachmentList())
      #if ($attachmentList &amp;&amp; $attachmentList.size() &gt; 0)
        #set ($sortedAttachments = $sorttool.sort($attachmentList, 'date:desc'))
      #end

      #set($justUploaded = false)
      #if("$!request.ref" == "upload")
        #set($justUploaded = true)
      #end
      &lt;ul&gt;
        #foreach($attachment in $sortedAttachments)
          #set($attachmentExtension = "#printAttachmentExtension($attachment)")
          #if ($attachment.mimeType == "text/plain" || $attachmentExtension == ".csv" || $attachmentExtension == "" || $attachmentExtension == ".xls")
            #set($attachmentRef = $services.model.createAttachmentReference($doc.documentReference, $attachment.filename))
            &lt;li&gt;&lt;input type="radio" name="batchimportattachmentref" value="$services.model.serialize($attachmentRef)" #if($velocityCount == 1 &amp;&amp; $justUploaded)checked="checked"#end #if(!$justUploaded &amp;&amp; $attachmentRef.equals($importconfig.attachmentReference))checked="checked"#end/&gt;$attachment.filename&lt;/attachment&gt;&lt;/li&gt;
          #end
        #end
      &lt;/ul&gt;
      #printBatchImportNonDefaultOptions($importconfig)      
      #displayDefaultButtons("", "mapping", "choosefile")
    &lt;/form&gt;
  {{/html}}
#end

#macro(displayColumnMapping)
  == $msg.get('batchimport.import.mapping.title') ==

  #set($applicationClass = $xwiki.getClass($importconfig.mappingClassName))
  
  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;
  {{/html}}

  #set($columnsList = $services.batchimport.getColumnHeaders($importconfig))
  #if ($columnsList)
    {{html clean="false" wiki="true"}}
      |=  $msg.get('batchimport.import.mapping.fields', [$doc.space]) |= $msg.get('batchimport.import.mapping.columns')
      | $msg.get('batchimport.import.mapping.doc.name') | &lt;select name="batchimportmapping_doc.name"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get('doc.name')" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
      #foreach($prop in $applicationClass.properties)
        | $prop.prettyName | &lt;select name="batchimportmapping_${prop.name}"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get($prop.name)" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
      #end
    {{/html}}
  #else
    #displayLastException('mapping')
  #end

  {{html clean="false" wiki="false"}}
    ## in order to prevent mappings coming from the object and not overwritten by the UI to be displayed here in hidden, we clean now the mapping of the importconfig (after we displayed it), so that the UI displayed above will always be right
    #set($discard = $importconfig.clearFieldsMapping())
    #printBatchImportNonDefaultOptions($importconfig)  
    #displayDefaultButtons("choosefile", "importsimulation", "mapping")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImportSimulation)
  == $msg.get('batchimport.import.importsimulation.title') ==

  #set($result = $services.batchimport.doImport($importconfig, true, true, false, true))

  #if($result)
    {{info}}$result{{/info}}
  #else
    #displayLastException('importsimulation')
  #end

  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;  
    #printBatchImportNonDefaultOptions($importconfig)
    #displayDefaultButtons("mapping", "import", "importsimulation")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImport)
  == $msg.get('batchimport.import.import.title') ==

  #set($result = $services.batchimport.doImport($importconfig, true, true, false, false))

  #if($result)
    {{info}}$result{{/info}}
  #else
    #displayLastException('import')
  #end
#end
{{/velocity}}

{{velocity}}
## read the import config, the import steps will need it
## first from the stored class for preserving settings, then overwrite from the request
#set($importconfig = $services.batchimport.readConfigurationFromObject($doc, "BatchImport.BatchImportClass"))
## here, for all steps besides the mapping step, overwrite the mapping list completely with the list from the request, 
## so that there are no "hidden" mappings used for the import, since the class has only " fill in presets" role, 
## the configuration itself to be used will still be passed in params  -&gt; this is to prevent validating a set of 
## steps and executing a different import because somebody else changed the stored configuration in the mean time.
#if("$!request.step_mapping" == "")
  #set($discard = $importconfig.clearFieldsMapping())
#end
#set($importconfig = $services.batchimport.readConfigurationFromRequest($importconfig))
## and put the default settings
#set($discard = $importconfig.setHeaderRow(true))
#set($discard = $importconfig.setDefaultSpace($doc.space))
#set($spaceHome = $xwiki.getDocument($doc.space, 'WebHome'))
#set($livetableObjInWebHome = $spaceHome.getObject('AppWithinMinutes.LiveTableClass'))
#set($classDocument = $livetableObjInWebHome.getProperty('class').value)
#set($discard = $importconfig.setMappingClassName($classDocument))
## try to guess the type of import by the name of the attachment
#if($services.model.serialize($importconfig.attachmentReference).endsWith(".xls"))
  #set($discard = $importconfig.setType('xls'))
#else
  #set($discard = $importconfig.setType('csv'))
#end

## before displaying the current step, save the data coming from previous step to the presets object in this document, as it is written in the read config
#saveDataToPresetsObject()

#if("$!request.step_mapping" != "")
  #displayColumnMapping()
#elseif("$!request.step_importsimulation" != "")
  #doImportSimulation()
#elseif("$!request.step_import" != "")
  #doImport()
#else
  #displayUploadFile()
#end
{{/velocity}}
</content></xwikidoc>