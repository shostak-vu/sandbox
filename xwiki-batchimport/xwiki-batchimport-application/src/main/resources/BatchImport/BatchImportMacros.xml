<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>BatchImport</web>
<name>BatchImportMacros</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1342186747000</creationDate>
<date>1342188716000</date>
<contentUpdateDate>1342188716000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{velocity output="false"}}
#macro(displayLastException $translationKeyComponent)
  #set($exception = $services.batchimport.exceptionFromContext)
  #if ($exception)
    {{error}}**$msg.get("batchimport.import.${translationKeyComponent}.error.exception")**
    
      [$exception.class.name] $exception.message
      #foreach($elt in $exception.stackTrace)
        at $elt
      #end
    {{/error}}
  #else
    {{error}}
      $msg.get("batchimport.import.${translationKeyComponent}.error.noexception")
    {{/error}}
  #end
#end

#macro(printAttachmentExtension $attachment)
  #set($filename = $attachment.filename)
  #set($lastDot = $filename.lastIndexOf('.'))
  #if ($lastDot &gt; 0)$filename.substring($lastDot)#end
#end

#macro(displayDefaultButtons $previousStep $currentStep $nextStep)
  ## display the current step in hidden so that we know when to save the data in the class
  &lt;input type="hidden" name="referringstep" value="$currentStep" /&gt;
  &lt;div class="buttonwrapper"&gt;
    #if ("$!previousStep" != "")
      &lt;input type="submit" value="$escapetool.xml($msg.get("batchimport.import.${currentStep}.previous"))" name="step_${previousStep}" class="button previous" /&gt;  
    #end  
    #if ("$!nextStep" != "")
      &lt;input type="submit" value="$escapetool.xml($msg.get("batchimport.import.${currentStep}.next"))" name="step_${nextStep}" class="button next" /&gt;  
    #end
  &lt;/div&gt;  
#end

#macro(printBatchImportNonDefaultOptions $config)
  ## selected file
  #if($config.attachmentReference)
    &lt;input type="hidden" name="batchimportattachmentref" value="$services.model.serialize($config.attachmentReference)" /&gt;
  #end
  ## mapping options
  #if($config.fieldsMapping.size() &gt; 0)
    #foreach($fieldMapping in $config.fieldsMapping.entrySet())
      &lt;input type="hidden" name="batchimportmapping_${fieldMapping.key}" value="${fieldMapping.value}" /&gt;
    #end
  #end
  #if($config.locale)
    &lt;input type="hidden" name="batchimportlocalelanguage" size="2" value="$!importconfig.locale.language"/&gt;
  #end
  #if("$!config.defaultDateFormat" != "")
    &lt;input type="hidden" name="batchimportdefaultdateformat" value="$!importconfig.defaultDateFormat"/&gt;
  #end
  #if("$!config.listseparator" != "")
    &lt;input type="hidden" name="batchimportlistseparator" size="1" value="$importconfig.listSeparator"/&gt;
  #end
  ## overwrite options
  #if($config.overwrite)
    &lt;input type="hidden" name="batchimportoverwrite" value="$config.overwrite" /&gt;
  #end
  #if($config.docNameDeduplication)
    &lt;input type="hidden" name="batchimportdocnamededuplication" value="$config.docNameDeduplication" /&gt;
  #end
#end

#macro(saveDataToPresetsObject)
  ## get the previous step
  #set($referringStep = "$!request.referringstep")
  ## get the object, create a new one if needed
  #set($presetsObject = $doc.getObject('BatchImport.BatchImportClass'))
  #if(!$presetsObject)
    #set($presetsObject = $doc.newObject('BatchImport.BatchImportClass'))
  #end
  #set($madeChanges = false)
  #if($referringStep == "choosefile")
    ## save the file in the class, only if different
    #if ($services.model.serialize($importconfig.attachmentReference) != $presetsObject.getProperty('metadatafilename').value)
      #set($discard = $presetsObject.set('metadatafilename', $services.model.serialize($importconfig.attachmentReference)))
      #set($madeChanges = true)
    #end
  #elseif($referringStep == "mapping")
    ## save the classname only if different
    #if ("$!importconfig.mappingClassName" != $presetsObject.getProperty('classname').value)
      #set($discard = $presetsObject.set('classname', $importconfig.mappingClassName))
      #set($madeChanges = true)
    #end
    ## save the listseparator only if different
    #if ("$!importconfig.listSeparator" != $presetsObject.getProperty('listseparator').value)
      #set($discard = $presetsObject.set('listseparator', "$!importconfig.listSeparator"))
      #set($madeChanges = true)
    #end
    ## save the default space only if different
    #if ("$!importconfig.defaultSpace" != $presetsObject.getProperty('space').value)
      #set($discard = $presetsObject.set('space', $!importconfig.defaultSpace))
      #set($madeChanges = true)
    #end
    ## serialize and save the mapping in the class only if different
    #set($mappingString = "")
    #foreach($fieldMapping in $importconfig.fieldsMapping.entrySet())
      #if ($mappingString != "")
        #set($mappingString = "${mappingString}${util.newline}")
      #end
      ## the other way around since this is the way we save in the class
      #set($mappingString = "${mappingString}${fieldMapping.value}=${fieldMapping.key}")
    #end
    #if ($mappingString != $presetsObject.getProperty('mapping').value)
      #set($discard = $presetsObject.set('mapping', $mappingString))
      #set($madeChanges = true)
    #end
  #end
  #if($madeChanges)
    $doc.save("Updated presets")
  #end
#end

#macro(displayUploadFile)
  == $msg.get('batchimport.import.choosefile.title') ==
  
  {{info}}$msg.get('batchimport.import.choosefile.description'){{/info}}

  ## upload form for files
  {{html clean="false"}}
    &lt;form method="post" enctype="multipart/form-data" action="$doc.getURL('upload')" /&gt;
      &lt;input type="hidden" value="$!{services.csrf.getToken()}" name="form_token" /&gt;
      &lt;input type="hidden" value="$doc.getURL('view', "sheet=$escapetool.url('BatchImport.BatchImportSheet')&amp;ref=upload")" name="xredirect" /&gt;
      &lt;label for="batchimportfileupload"&gt;$msg.get('batchimport.import.choosefile.fileupload'): &lt;/label&gt;
      &lt;input type="file" class="uploadFileInput" size="40" value="" name="filepath" id="batchimportfileupload"&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" class="button" value="$msg.get('batchimport.import.choosefile.uploadfile')"&gt;&lt;/span&gt;
    &lt;/form&gt;
  {{/html}}

  ##file listing + selector
  {{html clean="false"}}
    &lt;form action="" method="post"&gt;
      ## display the attachmens list in descending order by date and select the latest by default if we're coming from an upload
      #set ($attachmentList = $doc.getAttachmentList())
      #if ($attachmentList &amp;&amp; $attachmentList.size() &gt; 0)
        #set ($sortedAttachments = $sorttool.sort($attachmentList, 'date:desc'))
      #end

      #set($justUploaded = false)
      #if("$!request.ref" == "upload")
        #set($justUploaded = true)
      #end
      &lt;div class="chooseattachment"&gt;
        $msg.get('batchimport.import.choosefile.fileselect'): 
        &lt;ul class="attachmentlist"&gt;
          #foreach($attachment in $sortedAttachments)
            #set($attachmentExtension = "#printAttachmentExtension($attachment)")
            #if ($attachment.mimeType == "text/plain" || $attachmentExtension == ".csv" || $attachmentExtension == "" || $attachmentExtension == ".xls")
              #set($attachmentRef = $services.model.createAttachmentReference($doc.documentReference, $attachment.filename))
              &lt;li&gt;&lt;input type="radio" name="batchimportattachmentref" value="$services.model.serialize($attachmentRef)" #if($velocityCount == 1 &amp;&amp; $justUploaded)checked="checked"#end #if(!$justUploaded &amp;&amp; $attachmentRef.equals($importconfig.attachmentReference))checked="checked"#end /&gt;
                 &lt;span class="mime"&gt;#mimetypeimg($attachment.getMimeType().toLowerCase() $attachment.getFilename().toLowerCase())&lt;/span&gt; 
                 &lt;span class="name"&gt;$attachment.filename&lt;/span&gt;&lt;span class="version"&gt; &lt;a href="$doc.getAttachmentURL(${attachment.filename}, 'viewattachrev')" title="$msg.get('core.viewers.attachments.showHistory')"&gt;$attachment.version&lt;/a&gt;&lt;/span&gt;
                 &lt;div class="meta"&gt;
                   &lt;span class="publisher"&gt;$msg.get('core.viewers.attachments.author', ["$!xwiki.getUserName($attachment.author)"]) &lt;/span&gt;&lt;span class="date"&gt;$msg.get('core.viewers.attachments.date', [$xwiki.formatDate($attachment.date)])&lt;/span&gt;&lt;span class="size"&gt;, #dynamicsize($attachment.filesize)&lt;/span&gt;
                 &lt;/div&gt;
              &lt;/li&gt;
            #end
          #end
        &lt;/ul&gt;
      &lt;/div&gt;
      #printBatchImportNonDefaultOptions($importconfig)      
      #displayDefaultButtons("", "choosefile", "mapping")
    &lt;/form&gt;
  {{/html}}
#end

#macro(displayColumnMapping)
  == $msg.get('batchimport.import.mapping.title') ==

  {{info}}$msg.get('batchimport.import.mapping.description'){{/info}}

  #set($applicationClass = $xwiki.getClass($importconfig.mappingClassName))

  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;
  {{/html}}

  #set($columnsList = $services.batchimport.getColumnHeaders($importconfig))
  #if ($columnsList)
    {{container layoutStyle="columns"}}
    ((({{html clean="false" wiki="true"}}
        |=  $msg.get('batchimport.import.mapping.fields', [$doc.space]) |= $msg.get('batchimport.import.mapping.columns')
        | $msg.get('batchimport.import.mapping.doc.name') | &lt;select name="batchimportmapping_doc.name"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get('doc.name')" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
        #foreach($prop in $applicationClass.properties)
          | $prop.prettyName | &lt;select name="batchimportmapping_${prop.name}"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get($prop.name)" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
        #end
        #foreach($standardField in $fieldsToMap)
          #if($standardField != 'doc.name')
            | $msg.get("batchimport.import.mapping.${standardField}") | &lt;select name="batchimportmapping_${standardField}"&gt;&lt;option value=""&gt;$msg.get('batchimport.import.mapping.none')&lt;/option&gt;#foreach($column in $columnsList)&lt;option name="$column" value="$column" #if("$!importconfig.fieldsMapping.get($standardField)" == $column)selected="selected"#end&gt;$column&lt;/option&gt;#end&lt;/select&gt;
          #end
        #end
      {{/html}})))
    (((
      {{html clean="false" wiki="true"}}
        {{info}}$msg.get('batchimport.import.mapping.localelanguage.description'){{/info}}

        $msg.get('batchimport.import.mapping.localelanguage'): &lt;input type="text" name="batchimportlocalelanguage" size="2" value="$!importconfig.locale.language"/&gt;
        
        {{info}}$msg.get('batchimport.import.mapping.defaultdateformat.description'){{/info}}

        $msg.get('batchimport.import.mapping.defaultdateformat'): &lt;input type="text" name="batchimportdefaultdateformat" value="$!importconfig.defaultDateFormat"/&gt;

        {{info}}$msg.get('batchimport.import.mapping.listseparator.description'){{/info}}

        $msg.get('batchimport.import.mapping.listseparator'): &lt;input type="text" name="batchimportlistseparator" size="1" value="$importconfig.listSeparator"/&gt;
      {{/html}}
    )))
    {{/container}}
  #else
    #displayLastException('mapping')
  #end

  {{html clean="false" wiki="false"}}
    ## in order to prevent mappings coming from the object and not overwritten by the UI to be displayed here in hidden, we clean now the mapping of the importconfig (after we displayed it), so that the UI displayed above will always be right
    #set($discard = $importconfig.clearFieldsMapping())
    #printBatchImportNonDefaultOptions($importconfig)  
    #displayDefaultButtons("choosefile", "mapping", "preview")
    &lt;/form&gt;
  {{/html}}
#end

#macro(displayParsedValue $property $parsedValue $applicationTemplateObject)
  ## switch some cases here, depending on the type of data and the value
  #if($parsedValue != $xwiki.null)#if($parsedValue.class.name.endsWith("List") &amp;&amp; "$!parsedValue" != ""){{html wiki="false" clean="false"}}&lt;ul&gt;#foreach($val in $parsedValue)&lt;li&gt;${val}&lt;/li&gt;#end&lt;/ul&gt;{{/html}}#elseif($parsedValue.class.name.endsWith("Boolean") &amp;&amp; "$!parsedValue" != "")#if($parsedValue)${applicationTemplateObject.set($property.name, 1)}#else${applicationTemplateObject.set($property.name, 0)}#end${applicationTemplateObject.display($property.name, 'view')}#else${applicationTemplateObject.set($property.name, $parsedValue)}${applicationTemplateObject.display($property.name, 'view')}#end#else{{warning}} {{/warning}}#end
#end

#macro(displayMappingPreview)
  == $msg.get('batchimport.import.preview.title') ==
  
  {{info}}$msg.get('batchimport.import.preview.description'){{/info}}
  
  #set($result = $services.batchimport.getMappingPreview($importconfig, 10, "i18n"))

  #if($result)
    #set($applicationClass = $xwiki.getClass($importconfig.mappingClassName))
    ## we need the stupid template here since we cannot get displayed pretty name otherwise (we need an object or protected API)
    #set($applicationTemplate = $xwiki.getDocument("${importconfig.mappingClassName.substring(0, $importconfig.mappingClassName.indexOf('Class'))}Template"))
    #set($applicationTemplateObject = $applicationTemplate.getObject($importconfig.mappingClassName)) 
    #set($mappedProperties = $importconfig.fieldsMapping.keySet())
    ## table head: all class properties which are mapped along with all standard properties which are mapped. Before all, built document reference
    |= |=$msg.get('batchimport.import.mapping.doc.reference')#foreach($prop in $applicationClass.properties)#if($mappedProperties.contains($prop.name))|=$applicationTemplate.displayPrettyName($prop.name, $applicationTemplateObject)#end#end#foreach($standardProp in $fieldsToMap)#if($standardProp != "doc.name" &amp;&amp; $mappedProperties.contains($standardProp))|=$msg.get("batchimport.import.mapping.${standardProp}")#end#end

    ## table body
    #foreach($parsedRow in $result.parsedData)
      ## all data in the same order
      | $velocityCount |#if($parsedRow.get("doc.reference"))$!services.model.serialize($parsedRow.get("doc.reference"), "local")#else{{warning}} {{/warning}}#end#foreach($prop in $applicationClass.properties)#if($mappedProperties.contains($prop.name))|#displayParsedValue($prop, $parsedRow.get($prop.name), $applicationTemplateObject)#end#end#foreach($standardProp in $fieldsToMap)#if($standardProp != "doc.name" &amp;&amp; $mappedProperties.contains($standardProp))|$parsedRow.get($standardProp)#end#end

    #end
  
    #if ($result.log.errorLog.length() &gt; 0)
      === $msg.get('batchimport.import.preview.errorlog') ===

      (%class="importlogbox"%)((({{warning}}$result.log.errorLog{{/warning}})))
    #end
  #else
    #displayLastException('preview')
  #end  

  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;
    #printBatchImportNonDefaultOptions($importconfig)  
    #displayDefaultButtons("mapping", "preview", "overwrite")
    &lt;/form&gt;    
  {{/html}}
#end

#macro(displayOverwriteChoices)
  == $msg.get('batchimport.import.overwrite.title') ==

  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;
  {{/html}}

    {{info}}$msg.get('batchimport.import.overwrite.deduplication.explanation'){{/info}}

    {{html clean="false" wiki="false"}}
    &lt;ul&gt;
    #foreach($choice in ["SKIP", "UPDATE", "GENERATE_NEW"])
      &lt;li&gt;&lt;input type="radio" name="batchimportdocnamededuplication" value="$choice" #if("$!importconfig.docNameDeduplication" == $choice)checked="checked"#end&gt;$msg.get("batchimport.import.overwrite.deduplication.option.${choice.toLowerCase()}")&lt;/input&gt;&lt;/li&gt;
    #end
    &lt;/ul&gt;
    {{/html}}

    {{info}}$msg.get('batchimport.import.overwrite.explanation'){{/info}}

    {{html clean="false" wiki="false"}}
    &lt;ul&gt;
    #foreach($choice in ["SKIP", "UPDATE", "REPLACE", "GENERATE_NEW"])
      &lt;li&gt;&lt;input type="radio" name="batchimportoverwrite" value="$choice" #if("$!importconfig.overwrite" == $choice)checked="checked"#end&gt;$msg.get("batchimport.import.overwrite.option.${choice.toLowerCase()}")&lt;/input&gt;&lt;/li&gt;
    #end
    &lt;/ul&gt;

    #printBatchImportNonDefaultOptions($importconfig)
    #displayDefaultButtons("preview", "overwrite", "importsimulation")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImportSimulation)
  == $msg.get('batchimport.import.importsimulation.title') ==

  #set($result = $services.batchimport.doImport($importconfig, true, false, true, "i18n"))

  #if($result)
    #if ($result.errorLog.length() &gt; 0)
      === $msg.get('batchimport.import.importsimulation.errorlog') ===

      (%class="importlogbox"%)((({{warning}}$result.errorLog{{/warning}})))

      === $msg.get('batchimport.import.importsimulation.fulllog') ===
    #end

    (%class="importlogbox importfulllogbox"%)((({{info}}$result.fullLog{{/info}})))
  #else
    #displayLastException('importsimulation')
  #end

  {{html clean="false" wiki="false"}}
    &lt;form action="" method="post"&gt;  
    #printBatchImportNonDefaultOptions($importconfig)
    #displayDefaultButtons("overwrite", "importsimulation", "import")
    &lt;/form&gt;
  {{/html}}
#end

#macro(doImport)
  == $msg.get('batchimport.import.import.title') ==

  $msg.get('batchimport.import.import.description')

  #set($result = $services.batchimport.doImport($importconfig, true, false, false, "i18n"))

  #if($result)
    #if ($result.errorLog.length() &gt; 0)
      === $msg.get('batchimport.import.import.errorlog') ===

      (%class="importlogbox"%)((({{warning}}$result.errorLog{{/warning}})))

      === $msg.get('batchimport.import.import.fulllog') ===
    #end

    (%class="importlogbox importfulllogbox"%)((({{info}}$result.fullLog{{/info}})))
  #else
    #displayLastException('import')
  #end
  
  [[$msg.get('batchimport.import.import.backtowebhome', [$doc.space])&gt;&gt;${doc.space}.WebHome]]
#end
{{/velocity}}</content></xwikidoc>